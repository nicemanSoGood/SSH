package com.ihtc.baseDao;

import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.List;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Projections;
import org.springframework.orm.hibernate5.support.HibernateDaoSupport;

@SuppressWarnings("all")
public class BaseDaoImpl<T> extends HibernateDaoSupport implements BaseDao<T> {

	private Class clazz;
	
	public BaseDaoImpl(){
		//获得当前类型的带有泛型类型的父类
		ParameterizedType ptClass = (ParameterizedType) this.getClass().getGenericSuperclass();
		//获得当前运行期的泛型类型
		clazz = (Class) ptClass.getActualTypeArguments()[0];
	}
	
	@Override
	public void save(T t) {
		this.getHibernateTemplate().save(t);
	}

	@Override
	public void delete(T t) {
		this.getHibernateTemplate().delete(t);
	}

	@Override
	public void delete(Serializable id) {
		T t = this.getById(id);
		this.getHibernateTemplate().delete(t);
	}

	@Override
	public void update(T t) {
		this.getHibernateTemplate().update(t);
	}

	@Override
	public T getById(Serializable id) {
		return (T) this.getHibernateTemplate().get(clazz, id);
	}

	@Override
	public Integer getTotalCount(DetachedCriteria criteria) {

		//设置查询的聚合函数，总记录数
		criteria.setProjection(Projections.rowCount());
		
		@SuppressWarnings("unchecked")
		List<Long> list = (List<Long>) this.getHibernateTemplate().findByCriteria(criteria);
		//清空聚合函数
		criteria.setProjection(null);
		
		if(list != null && list.size()>0){
			Long count = list.get(0);
			return count.intValue();
		}
		
		return null;
		
	}

	@Override
	public List<T> getPageList(DetachedCriteria criteria, Integer start, Integer pageSize) {

		@SuppressWarnings("unchecked")
		List<T> list = (List<T>) this.getHibernateTemplate().findByCriteria(criteria,start,pageSize);
		
		return list;
	}

	@Override
	public void saveOrUpdate(T t) {
		// TODO Auto-generated method stub
		
	}
	
}
