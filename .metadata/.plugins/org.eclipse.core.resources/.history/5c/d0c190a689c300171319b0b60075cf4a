<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 开启注解扫描 -->
	<context:component-scan base-package="com.ihtc"/>
	
	<!-- 加载db.properties文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
	
	<!-- 配置C3P0连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
	
		<!-- 指定连接池中保留的最大连接数，默认为15 -->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
		<!-- 指定连接池中保留的最小连接数 -->
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<!-- 指定连接池的初始化连接数  取值应在minPoolSize 与 maxPoolSize 之间.Default:3-->  
        <property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>  
        <!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0-->  
        <property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>  
        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3-->  
        <property name="acquireIncrement" value="${jdbc.acquireIncrement}"/>  
        <!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。  
        但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0-->  
        <property name="maxStatements" value="${jdbc.maxStatements}"/>  
        <!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->  
        <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/> 
	</bean>
	
	<!-- LocalSessionFactoryBean加载配置文件 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 先加载连接池 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 加载方言，加载可选，不能绑定本地session -->
		<property name="hibernateProperties">
			<props>
				<!--  数据库方言  --> 
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<!--  显示sql -->
				<prop key="hibernate.show_sql">true</prop>
				<!--  格式化sql语句   --> 
				<prop key="hibernate.format_sql">true</prop>
				<!--  数据库表的创建与修改   --> 
				<!--   
				validate检验字段
				create 如果有先删除，在创建，一般用在自己测试
				update 如果有就值执行对数据库操作的语句，如果没有就会先创建一张表，然后进行相应的操作，一般工作使用
			
  				--> 
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<!-- 配置数据库的隔离级别,不配置默认为4 --> 
  				<prop key="hibernate.connection.isolation">4</prop> 
			</props>
		</property>
		
		
		
		
		
		
		
		
		
		







		
		
		
		
		<!--  引入映射文件  -->
		<property name="mappingResources">
			<list>
				<value>com/ihtc/bean/Customer.hbm.xml</value>
				<!-- <value>com/ihtc/bean/LinkMan.hbm.xml</value>
				<value>com/ihtc/bean/User.hbm.xml</value> -->
			</list>
		</property>
		
		
	</bean>
	
	<!-- 先配置平台事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 开启事物注解 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	
	
	
	
	
	<!-- show time -->
	<!-- dao -->
	<bean id="customerDao" class="com.ihtc.dao.CustomerDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="baseDictDao" class="com.ihtc.dao.BaseDictDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- service -->
	<bean id="customerService" class="com.ihtc.service.CustomerServiceImpl">
		<property name="customerDao" ref="customerDao"/>
	</bean>
	
	<!-- action -->
	<bean id="customerAction" class="com.ihtc.action.CustomerAction" scope="prototype">
		<property name="customerService" ref="customerService"/>
	</bean>




</beans>